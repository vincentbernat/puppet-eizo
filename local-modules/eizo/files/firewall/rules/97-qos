# -*- sh -*-

main sysctl -qw net.core.default_qdisc=fq_codel

for iface in /sys/class/net/*; do
    [[ ${iface##*/} != "lo" ]] || continue
    [[ $(<$iface/tx_queue_len) != 0 ]] || continue
    [[ $(<$iface/iflink) = $(<$iface/ifindex) ]] || continue

    main ip link set txqueuelen 32 dev ${iface##*/}
    # A bit odd, but we just want to apply the default qdisc. We can
    # only delete the current qdisc if it is not the default.
    main tc qdisc replace dev ${iface##*/} root fq_codel
    main tc qdisc del dev ${iface##*/} root
done

# QoS on internet interface. We assume that 6rd copy DSCP to IPv4
# packets, but dunno for sure. There is related code in the kernel for
# that.

ip46tables -t mangle -N QOS_MARK_internet
ip46tables -t mangle -A QOS_MARK_internet -j MARK --set-mark 0x2/0xff
ip46tables -t mangle -A QOS_MARK_internet -m dscp --dscp-class CS1 -j MARK --set-mark 0x3/0xff
ip46tables -t mangle -A QOS_MARK_internet -m dscp --dscp-class CS6 -j MARK --set-mark 0x1/0xff
ip46tables -t mangle -A QOS_MARK_internet -m dscp --dscp-class EF -j MARK --set-mark 0x1/0xff
ip46tables -t mangle -A QOS_MARK_internet -m dscp --dscp-class AF42 -j MARK --set-mark 0x1/0xff
ip46tables -t mangle -A QOS_MARK_internet -m tos  --tos Minimize-Delay -j MARK --set-mark 0x1/0xff

# Clear DSCP for incoming packets
ip46tables -t mangle -A PREROUTING -i internet -m dscp ! --dscp 0x00 -j DSCP --set-dscp-class BE
ip46tables -t mangle -A OUTPUT -p udp -m multiport --ports ntp,domain -j DSCP --set-dscp-class AF42
ip46tables -t mangle -A POSTROUTING -o internet -m mark --mark 0x00/0xff -g QOS_MARK_internet

main {
    cat <<EOF | xargs -n1 modprobe
act_ipt
sch_fq_codel
sch_ingress
act_mirred
cls_fw
sch_htb
EOF
}

# Bandwidth in kbit/s
uplink=7500
downlink=35000

# egress filtering
main {
    # Various rates. BE = best effort, BK = background
    prio=$(($uplink / 3))
    be=$(($uplink / 6))
    bk=$(($uplink / 6))
    ceil=$(($uplink - 128))
    quantum=$(</sys/class/net/internet/mtu)

    tc qdisc del dev internet root 2> /dev/null
    tc qdisc add dev internet root handle 1: htb default 12

    # Main qdisc is HTB with 3 queues:
    #  - priority
    #  - best effort
    #  - background
    tc class add dev internet parent 1:  classid 1:1  htb quantum $quantum rate ${uplink}kbit ceil ${uplink}kbit
    tc class add dev internet parent 1:1 classid 1:10 htb quantum $quantum rate ${uplink}kbit ceil ${uplink}kbit prio 0
    tc class add dev internet parent 1:1 classid 1:11 htb quantum $quantum rate 128kbit       ceil ${prio}kbit   prio 1
    tc class add dev internet parent 1:1 classid 1:12 htb quantum $quantum rate ${be}kbit     ceil ${ceil}kbit   prio 2
    tc class add dev internet parent 1:1 classid 1:13 htb quantum $quantum rate ${bk}kbit     ceil ${ceil}kbit   prio 3

    # Then, use fq_codel
    tc qdisc add dev internet parent 1:11 handle 110: fq_codel limit 1001 noecn quantum 300
    tc qdisc add dev internet parent 1:12 handle 120: fq_codel limit 1001 noecn quantum 300
    tc qdisc add dev internet parent 1:13 handle 130: fq_codel limit 1001 noecn quantum 300

    # Filters
    tc filter add dev internet parent 1:0 protocol all prio 999 u32 \
       match ip protocol 0 0x00 flowid 1:12 # catch all to default
    tc filter add dev internet parent 1:0 protocol ip prio 1 handle 1 fw classid 1:11
    tc filter add dev internet parent 1:0 protocol ip prio 2 handle 2 fw classid 1:12
    tc filter add dev internet parent 1:0 protocol ip prio 3 handle 3 fw classid 1:13

    # Arp traffic
    tc filter add dev internet parent 1:0 protocol arp prio 7 handle 1 fw classid 1:11

    # ICMP (background traffic)
    tc filter add dev internet parent 1:0 protocol ip prio 8 \
       u32 match ip protocol 1 0xff flowid 1:13
    # ICMPv6?

}

# ingress filtering
main {
    quantum=$(($(</sys/class/net/internet/mtu) * 4))

    ip link set up dev ifb4inet 2> /dev/null || {
        ip link add name ifb4inet type ifb
        ip link set up dev ifb4inet
        ip link del ifb0 2> /dev/null || true
        ip link del ifb1 2> /dev/null || true
    }

    tc qdisc del dev internet handle ffff: ingress
    tc qdisc add dev internet handle ffff: ingress
    tc qdisc del dev ifb4inet root 2> /dev/null

    tc qdisc add dev ifb4inet root handle 1: htb default 10
    tc class add dev ifb4inet parent 1: classid 1:1   htb quantum $quantum rate ${downlink}kbit ceil ${downlink}kbit
    tc class add dev ifb4inet parent 1:1 classid 1:10 htb quantum $quantum rate ${downlink}kbit ceil ${downlink}kbit prio 0
    tc qdisc add dev ifb4inet parent 1:10 handle 110: fq_codel limit 1001 ecn

    tc filter add dev internet parent ffff: protocol all prio 10 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb4inet
}
