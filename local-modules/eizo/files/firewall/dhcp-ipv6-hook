# -*- sh -*-

# Ideally, all the information should be provided in option-6rd
# through DHCP. However, this is not the case at Swisscom. So,
# instead, we need to hardcode some information...
sixrd_mtu=1472                  # This is 1500 - 20 - 8 (PPPoE header)
sixrd_ttl=64
sixrd_prefix=2a02:1200::/28     # No way to guess, just have to know it.
sixrd_br=193.5.29.1             # That's "6rd.swisscom.com"

# The following commands are heavily inspired from:
#  https://github.com/marineam/comcast-6rd/blob/master/dhclient-exit-hooks.d/comcast-6rd-tunnel

sixrd_down() {
    ip tunnel del internet6 || true
}

sixrd_up() {
    ipv4=${new_ip_address:-$old_ip_address}

    # Let's compute our prefix from our IP. We are not in the same
    # simple case of Comcast because of our /28 prefix (but that's great
    # because we can subnet our prefix which will be a /60. We'll use a
    # bit of Ruby (which doesn't come with a great IP module but that's
    # OK for what we want to do).
    sixrd_delegated=$(ruby <<EOF
require 'ipaddr'
prefix = IPAddr.new "${sixrd_prefix}", Socket::AF_INET6
prefixlen = ${sixrd_prefix#*/}
ipv4 = IPAddr.new "${ipv4}", Socket::AF_INET
ipv6 = IPAddr.new (prefix.to_i + (ipv4.to_i << (64 + 32 - prefixlen))), Socket::AF_INET6
puts ipv6
EOF
)

    # Let's configure the tunnel
    ip tunnel add internet6 mode sit local $ipv4 ttl $sixrd_ttl
    ip tunnel 6rd dev internet6 6rd-prefix ${sixrd_prefix}
    ip addr replace ${sixrd_delegated}1/64 dev internet6
    ip link set mtu ${sixrd_mtu} dev internet6
    ip link set internet6 up
    ip route replace default via ::${sixrd_br} dev internet6
}

case $reason in
    BOUND|REBOOT)
        sixrd_down
        sixrd_up
        ;;
    RENEW|REBIND)
        if [ "$new_ip_address" != "$old_ip_address" ]; then
            sixrd_down
            sixrd_up
        fi
        ;;
    STOP|EXPIRE|FAIL|RELEASE)
        sixrd_down
        ;;
esac
